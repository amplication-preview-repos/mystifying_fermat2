/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UiElement as PrismaUiElement } from "@prisma/client";

export class UiElementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UiElementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.uiElement.count(args);
  }

  async uiElements(
    args: Prisma.UiElementFindManyArgs
  ): Promise<PrismaUiElement[]> {
    return this.prisma.uiElement.findMany(args);
  }
  async uiElement(
    args: Prisma.UiElementFindUniqueArgs
  ): Promise<PrismaUiElement | null> {
    return this.prisma.uiElement.findUnique(args);
  }
  async createUiElement(
    args: Prisma.UiElementCreateArgs
  ): Promise<PrismaUiElement> {
    return this.prisma.uiElement.create(args);
  }
  async updateUiElement(
    args: Prisma.UiElementUpdateArgs
  ): Promise<PrismaUiElement> {
    return this.prisma.uiElement.update(args);
  }
  async deleteUiElement(
    args: Prisma.UiElementDeleteArgs
  ): Promise<PrismaUiElement> {
    return this.prisma.uiElement.delete(args);
  }
}
