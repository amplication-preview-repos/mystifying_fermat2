/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UiElementService } from "../uiElement.service";
import { UiElementCreateInput } from "./UiElementCreateInput";
import { UiElement } from "./UiElement";
import { UiElementFindManyArgs } from "./UiElementFindManyArgs";
import { UiElementWhereUniqueInput } from "./UiElementWhereUniqueInput";
import { UiElementUpdateInput } from "./UiElementUpdateInput";

export class UiElementControllerBase {
  constructor(protected readonly service: UiElementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UiElement })
  async createUiElement(
    @common.Body() data: UiElementCreateInput
  ): Promise<UiElement> {
    return await this.service.createUiElement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        properties: true,
        style: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UiElement] })
  @ApiNestedQuery(UiElementFindManyArgs)
  async uiElements(@common.Req() request: Request): Promise<UiElement[]> {
    const args = plainToClass(UiElementFindManyArgs, request.query);
    return this.service.uiElements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        properties: true,
        style: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UiElement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uiElement(
    @common.Param() params: UiElementWhereUniqueInput
  ): Promise<UiElement | null> {
    const result = await this.service.uiElement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        properties: true,
        style: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UiElement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUiElement(
    @common.Param() params: UiElementWhereUniqueInput,
    @common.Body() data: UiElementUpdateInput
  ): Promise<UiElement | null> {
    try {
      return await this.service.updateUiElement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          properties: true,
          style: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UiElement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUiElement(
    @common.Param() params: UiElementWhereUniqueInput
  ): Promise<UiElement | null> {
    try {
      return await this.service.deleteUiElement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          properties: true,
          style: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
