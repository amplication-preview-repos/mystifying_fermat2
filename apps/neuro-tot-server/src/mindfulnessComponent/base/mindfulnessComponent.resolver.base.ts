/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MindfulnessComponent } from "./MindfulnessComponent";
import { MindfulnessComponentCountArgs } from "./MindfulnessComponentCountArgs";
import { MindfulnessComponentFindManyArgs } from "./MindfulnessComponentFindManyArgs";
import { MindfulnessComponentFindUniqueArgs } from "./MindfulnessComponentFindUniqueArgs";
import { CreateMindfulnessComponentArgs } from "./CreateMindfulnessComponentArgs";
import { UpdateMindfulnessComponentArgs } from "./UpdateMindfulnessComponentArgs";
import { DeleteMindfulnessComponentArgs } from "./DeleteMindfulnessComponentArgs";
import { MindfulnessComponentService } from "../mindfulnessComponent.service";
@graphql.Resolver(() => MindfulnessComponent)
export class MindfulnessComponentResolverBase {
  constructor(protected readonly service: MindfulnessComponentService) {}

  async _mindfulnessComponentsMeta(
    @graphql.Args() args: MindfulnessComponentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MindfulnessComponent])
  async mindfulnessComponents(
    @graphql.Args() args: MindfulnessComponentFindManyArgs
  ): Promise<MindfulnessComponent[]> {
    return this.service.mindfulnessComponents(args);
  }

  @graphql.Query(() => MindfulnessComponent, { nullable: true })
  async mindfulnessComponent(
    @graphql.Args() args: MindfulnessComponentFindUniqueArgs
  ): Promise<MindfulnessComponent | null> {
    const result = await this.service.mindfulnessComponent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MindfulnessComponent)
  async createMindfulnessComponent(
    @graphql.Args() args: CreateMindfulnessComponentArgs
  ): Promise<MindfulnessComponent> {
    return await this.service.createMindfulnessComponent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MindfulnessComponent)
  async updateMindfulnessComponent(
    @graphql.Args() args: UpdateMindfulnessComponentArgs
  ): Promise<MindfulnessComponent | null> {
    try {
      return await this.service.updateMindfulnessComponent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MindfulnessComponent)
  async deleteMindfulnessComponent(
    @graphql.Args() args: DeleteMindfulnessComponentArgs
  ): Promise<MindfulnessComponent | null> {
    try {
      return await this.service.deleteMindfulnessComponent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
