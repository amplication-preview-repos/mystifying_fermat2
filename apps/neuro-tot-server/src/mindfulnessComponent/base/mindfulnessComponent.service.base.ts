/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MindfulnessComponent as PrismaMindfulnessComponent,
} from "@prisma/client";

export class MindfulnessComponentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MindfulnessComponentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mindfulnessComponent.count(args);
  }

  async mindfulnessComponents(
    args: Prisma.MindfulnessComponentFindManyArgs
  ): Promise<PrismaMindfulnessComponent[]> {
    return this.prisma.mindfulnessComponent.findMany(args);
  }
  async mindfulnessComponent(
    args: Prisma.MindfulnessComponentFindUniqueArgs
  ): Promise<PrismaMindfulnessComponent | null> {
    return this.prisma.mindfulnessComponent.findUnique(args);
  }
  async createMindfulnessComponent(
    args: Prisma.MindfulnessComponentCreateArgs
  ): Promise<PrismaMindfulnessComponent> {
    return this.prisma.mindfulnessComponent.create(args);
  }
  async updateMindfulnessComponent(
    args: Prisma.MindfulnessComponentUpdateArgs
  ): Promise<PrismaMindfulnessComponent> {
    return this.prisma.mindfulnessComponent.update(args);
  }
  async deleteMindfulnessComponent(
    args: Prisma.MindfulnessComponentDeleteArgs
  ): Promise<PrismaMindfulnessComponent> {
    return this.prisma.mindfulnessComponent.delete(args);
  }
}
