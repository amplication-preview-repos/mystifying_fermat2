/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MindfulnessComponentService } from "../mindfulnessComponent.service";
import { MindfulnessComponentCreateInput } from "./MindfulnessComponentCreateInput";
import { MindfulnessComponent } from "./MindfulnessComponent";
import { MindfulnessComponentFindManyArgs } from "./MindfulnessComponentFindManyArgs";
import { MindfulnessComponentWhereUniqueInput } from "./MindfulnessComponentWhereUniqueInput";
import { MindfulnessComponentUpdateInput } from "./MindfulnessComponentUpdateInput";

export class MindfulnessComponentControllerBase {
  constructor(protected readonly service: MindfulnessComponentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MindfulnessComponent })
  async createMindfulnessComponent(
    @common.Body() data: MindfulnessComponentCreateInput
  ): Promise<MindfulnessComponent> {
    return await this.service.createMindfulnessComponent({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MindfulnessComponent] })
  @ApiNestedQuery(MindfulnessComponentFindManyArgs)
  async mindfulnessComponents(
    @common.Req() request: Request
  ): Promise<MindfulnessComponent[]> {
    const args = plainToClass(MindfulnessComponentFindManyArgs, request.query);
    return this.service.mindfulnessComponents({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MindfulnessComponent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mindfulnessComponent(
    @common.Param() params: MindfulnessComponentWhereUniqueInput
  ): Promise<MindfulnessComponent | null> {
    const result = await this.service.mindfulnessComponent({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MindfulnessComponent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMindfulnessComponent(
    @common.Param() params: MindfulnessComponentWhereUniqueInput,
    @common.Body() data: MindfulnessComponentUpdateInput
  ): Promise<MindfulnessComponent | null> {
    try {
      return await this.service.updateMindfulnessComponent({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MindfulnessComponent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMindfulnessComponent(
    @common.Param() params: MindfulnessComponentWhereUniqueInput
  ): Promise<MindfulnessComponent | null> {
    try {
      return await this.service.deleteMindfulnessComponent({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
