/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TutorService } from "../tutor.service";
import { TutorCreateInput } from "./TutorCreateInput";
import { Tutor } from "./Tutor";
import { TutorFindManyArgs } from "./TutorFindManyArgs";
import { TutorWhereUniqueInput } from "./TutorWhereUniqueInput";
import { TutorUpdateInput } from "./TutorUpdateInput";
import { TutoringSessionFindManyArgs } from "../../tutoringSession/base/TutoringSessionFindManyArgs";
import { TutoringSession } from "../../tutoringSession/base/TutoringSession";
import { TutoringSessionWhereUniqueInput } from "../../tutoringSession/base/TutoringSessionWhereUniqueInput";

export class TutorControllerBase {
  constructor(protected readonly service: TutorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tutor })
  async createTutor(@common.Body() data: TutorCreateInput): Promise<Tutor> {
    return await this.service.createTutor({
      data: data,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tutor] })
  @ApiNestedQuery(TutorFindManyArgs)
  async tutors(@common.Req() request: Request): Promise<Tutor[]> {
    const args = plainToClass(TutorFindManyArgs, request.query);
    return this.service.tutors({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tutor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tutor(
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<Tutor | null> {
    const result = await this.service.tutor({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tutor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTutor(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() data: TutorUpdateInput
  ): Promise<Tutor | null> {
    try {
      return await this.service.updateTutor({
        where: params,
        data: data,
        select: {
          bio: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tutor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTutor(
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<Tutor | null> {
    try {
      return await this.service.deleteTutor({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tutoringSessions")
  @ApiNestedQuery(TutoringSessionFindManyArgs)
  async findTutoringSessions(
    @common.Req() request: Request,
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<TutoringSession[]> {
    const query = plainToClass(TutoringSessionFindManyArgs, request.query);
    const results = await this.service.findTutoringSessions(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        status: true,

        subject: {
          select: {
            id: true,
          },
        },

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tutoringSessions")
  async connectTutoringSessions(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: TutoringSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tutoringSessions: {
        connect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tutoringSessions")
  async updateTutoringSessions(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: TutoringSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tutoringSessions: {
        set: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tutoringSessions")
  async disconnectTutoringSessions(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: TutoringSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tutoringSessions: {
        disconnect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
