/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Tutor as PrismaTutor,
  TutoringSession as PrismaTutoringSession,
} from "@prisma/client";

export class TutorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TutorCountArgs, "select">): Promise<number> {
    return this.prisma.tutor.count(args);
  }

  async tutors(args: Prisma.TutorFindManyArgs): Promise<PrismaTutor[]> {
    return this.prisma.tutor.findMany(args);
  }
  async tutor(args: Prisma.TutorFindUniqueArgs): Promise<PrismaTutor | null> {
    return this.prisma.tutor.findUnique(args);
  }
  async createTutor(args: Prisma.TutorCreateArgs): Promise<PrismaTutor> {
    return this.prisma.tutor.create(args);
  }
  async updateTutor(args: Prisma.TutorUpdateArgs): Promise<PrismaTutor> {
    return this.prisma.tutor.update(args);
  }
  async deleteTutor(args: Prisma.TutorDeleteArgs): Promise<PrismaTutor> {
    return this.prisma.tutor.delete(args);
  }

  async findTutoringSessions(
    parentId: string,
    args: Prisma.TutoringSessionFindManyArgs
  ): Promise<PrismaTutoringSession[]> {
    return this.prisma.tutor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tutoringSessions(args);
  }
}
