/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TutoringSession } from "./TutoringSession";
import { TutoringSessionCountArgs } from "./TutoringSessionCountArgs";
import { TutoringSessionFindManyArgs } from "./TutoringSessionFindManyArgs";
import { TutoringSessionFindUniqueArgs } from "./TutoringSessionFindUniqueArgs";
import { CreateTutoringSessionArgs } from "./CreateTutoringSessionArgs";
import { UpdateTutoringSessionArgs } from "./UpdateTutoringSessionArgs";
import { DeleteTutoringSessionArgs } from "./DeleteTutoringSessionArgs";
import { Subject } from "../../subject/base/Subject";
import { Tutor } from "../../tutor/base/Tutor";
import { TutoringSessionService } from "../tutoringSession.service";
@graphql.Resolver(() => TutoringSession)
export class TutoringSessionResolverBase {
  constructor(protected readonly service: TutoringSessionService) {}

  async _tutoringSessionsMeta(
    @graphql.Args() args: TutoringSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TutoringSession])
  async tutoringSessions(
    @graphql.Args() args: TutoringSessionFindManyArgs
  ): Promise<TutoringSession[]> {
    return this.service.tutoringSessions(args);
  }

  @graphql.Query(() => TutoringSession, { nullable: true })
  async tutoringSession(
    @graphql.Args() args: TutoringSessionFindUniqueArgs
  ): Promise<TutoringSession | null> {
    const result = await this.service.tutoringSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TutoringSession)
  async createTutoringSession(
    @graphql.Args() args: CreateTutoringSessionArgs
  ): Promise<TutoringSession> {
    return await this.service.createTutoringSession({
      ...args,
      data: {
        ...args.data,

        subject: args.data.subject
          ? {
              connect: args.data.subject,
            }
          : undefined,

        tutor: args.data.tutor
          ? {
              connect: args.data.tutor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TutoringSession)
  async updateTutoringSession(
    @graphql.Args() args: UpdateTutoringSessionArgs
  ): Promise<TutoringSession | null> {
    try {
      return await this.service.updateTutoringSession({
        ...args,
        data: {
          ...args.data,

          subject: args.data.subject
            ? {
                connect: args.data.subject,
              }
            : undefined,

          tutor: args.data.tutor
            ? {
                connect: args.data.tutor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TutoringSession)
  async deleteTutoringSession(
    @graphql.Args() args: DeleteTutoringSessionArgs
  ): Promise<TutoringSession | null> {
    try {
      return await this.service.deleteTutoringSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Subject, {
    nullable: true,
    name: "subject",
  })
  async getSubject(
    @graphql.Parent() parent: TutoringSession
  ): Promise<Subject | null> {
    const result = await this.service.getSubject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tutor, {
    nullable: true,
    name: "tutor",
  })
  async getTutor(
    @graphql.Parent() parent: TutoringSession
  ): Promise<Tutor | null> {
    const result = await this.service.getTutor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
