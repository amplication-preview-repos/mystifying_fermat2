/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TutoringSessionService } from "../tutoringSession.service";
import { TutoringSessionCreateInput } from "./TutoringSessionCreateInput";
import { TutoringSession } from "./TutoringSession";
import { TutoringSessionFindManyArgs } from "./TutoringSessionFindManyArgs";
import { TutoringSessionWhereUniqueInput } from "./TutoringSessionWhereUniqueInput";
import { TutoringSessionUpdateInput } from "./TutoringSessionUpdateInput";

export class TutoringSessionControllerBase {
  constructor(protected readonly service: TutoringSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TutoringSession })
  async createTutoringSession(
    @common.Body() data: TutoringSessionCreateInput
  ): Promise<TutoringSession> {
    return await this.service.createTutoringSession({
      data: {
        ...data,

        subject: data.subject
          ? {
              connect: data.subject,
            }
          : undefined,

        tutor: data.tutor
          ? {
              connect: data.tutor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        status: true,

        subject: {
          select: {
            id: true,
          },
        },

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TutoringSession] })
  @ApiNestedQuery(TutoringSessionFindManyArgs)
  async tutoringSessions(
    @common.Req() request: Request
  ): Promise<TutoringSession[]> {
    const args = plainToClass(TutoringSessionFindManyArgs, request.query);
    return this.service.tutoringSessions({
      ...args,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        status: true,

        subject: {
          select: {
            id: true,
          },
        },

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TutoringSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tutoringSession(
    @common.Param() params: TutoringSessionWhereUniqueInput
  ): Promise<TutoringSession | null> {
    const result = await this.service.tutoringSession({
      where: params,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        status: true,

        subject: {
          select: {
            id: true,
          },
        },

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TutoringSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTutoringSession(
    @common.Param() params: TutoringSessionWhereUniqueInput,
    @common.Body() data: TutoringSessionUpdateInput
  ): Promise<TutoringSession | null> {
    try {
      return await this.service.updateTutoringSession({
        where: params,
        data: {
          ...data,

          subject: data.subject
            ? {
                connect: data.subject,
              }
            : undefined,

          tutor: data.tutor
            ? {
                connect: data.tutor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          status: true,

          subject: {
            select: {
              id: true,
            },
          },

          tutor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TutoringSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTutoringSession(
    @common.Param() params: TutoringSessionWhereUniqueInput
  ): Promise<TutoringSession | null> {
    try {
      return await this.service.deleteTutoringSession({
        where: params,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          status: true,

          subject: {
            select: {
              id: true,
            },
          },

          tutor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
