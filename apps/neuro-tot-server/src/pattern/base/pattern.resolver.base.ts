/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pattern } from "./Pattern";
import { PatternCountArgs } from "./PatternCountArgs";
import { PatternFindManyArgs } from "./PatternFindManyArgs";
import { PatternFindUniqueArgs } from "./PatternFindUniqueArgs";
import { CreatePatternArgs } from "./CreatePatternArgs";
import { UpdatePatternArgs } from "./UpdatePatternArgs";
import { DeletePatternArgs } from "./DeletePatternArgs";
import { PatternService } from "../pattern.service";
@graphql.Resolver(() => Pattern)
export class PatternResolverBase {
  constructor(protected readonly service: PatternService) {}

  async _patternsMeta(
    @graphql.Args() args: PatternCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pattern])
  async patterns(
    @graphql.Args() args: PatternFindManyArgs
  ): Promise<Pattern[]> {
    return this.service.patterns(args);
  }

  @graphql.Query(() => Pattern, { nullable: true })
  async pattern(
    @graphql.Args() args: PatternFindUniqueArgs
  ): Promise<Pattern | null> {
    const result = await this.service.pattern(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pattern)
  async createPattern(
    @graphql.Args() args: CreatePatternArgs
  ): Promise<Pattern> {
    return await this.service.createPattern({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pattern)
  async updatePattern(
    @graphql.Args() args: UpdatePatternArgs
  ): Promise<Pattern | null> {
    try {
      return await this.service.updatePattern({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pattern)
  async deletePattern(
    @graphql.Args() args: DeletePatternArgs
  ): Promise<Pattern | null> {
    try {
      return await this.service.deletePattern(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
